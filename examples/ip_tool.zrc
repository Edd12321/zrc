#!../bin/zrc
# Ported to Zrc from:
# https://wiki.tcl-lang.org/page/A+Little+CIDR+Calculator

fn ip2int {
	let {i ip res} {
		set ip  = $argv(1)
		set res = 0
		echo -n $ip | while {![read -d '.' i]} {
			set res = [expr {$res<<8 | $i}]
		}
		return $res
	}
}

fn bits {
	let {i j n res} {
		set n   = $argv(1)
		set res = 0
		eval {
			for {set i = 0} {$i < [expr {00+$n}]} {inc i} { echo -n 1 }
			for {set i = 0} {$i < [expr {32-$n}]} {inc i} { echo -n 0 }
		} | while {![read -n 1 j]} {
			set res = [expr {$res<<1 | $j}]
		}
		return $res
	}
}

fn maskmatch {
	let {ip1 width ip2} {
		set ip1   = $argv(1)
		set width = $argv(2)
		set ip2   = $argv(3)
		expr {([ip2int $ip1] & [bits $width]) == ([ip2int $ip2] & [bits $width])}
	}
}

fn maskmatch2 {
	let {c i ip ip0 len mask ok width} {
		set mask = $argv(1)
		set ip   = $argv(2)
		set ok   = 0
		for {set i = 0 len = [string length $mask]} {$i <= $len} {inc i} {
			set c = [string index $mask $i]
			if {![string cmp $c '/']} {
				set ok = 1
			} else {
				switch $ok {
					case 0 { set ip0   = [string cat $ip0   $c] }
					case 1 { set width = [string cat $width $c] }
				}
			}
		}
		if {![string cmp $width '']} {
			! string cmp $mask $ip
		} else {
			maskmatch $ip0 $width $ip
		}
	}
}

if 1 { # Examples:
	echo [maskmatch2 10.10.1.32/27  10.10.1.44]
	# Expected result: 1
	
	echo [maskmatch2 10.10.1.32/27  10.10.1.90]
	# Expected result: 0
}
