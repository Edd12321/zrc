.TH ZRC 1
.SH NAME
zrc - command language
.SH SYNOPSIS
.B zrc
[
.B --version
|
.B --help
][
.B <file>
]
.SH DESCRIPTION
.I Zrc
is a UNIX shell and scripting language, influenced by Plan 9's rc, csh and the
.B Tool Command Language (Tcl).
Executing the
.I zrc
binary, you can either interpret a script from stdin, or an input file, specified by the first argument to the interpreter. Any line that contains an unquoted hash/pound/number sign (#) will be considered by the interpreter as containing a comment.
.SS Basic syntax - Pipelines
A pipeline (or "job" as it's more commonly called) represents an action that the shell can execute, either in the background or in the foreground (it may also be stopped). Jobs are sequences of commands separated by the "pipe" symbol, and may optionally end/be separated with ampersands or semicolons
.RB ( &
,
.B &&
,
.B ||
or
.BR ; ),
in which case if the job ends with an ampersand, it is executed in the background and
.I zrc
does not wait for it to finish running before starting the next job. Jobs are launched from left-to-right, and line by line. The AND and OR operators work like in the classic Bourne shell.
.PP
Consider the following pipelines:
.EX
	# The command "A"'s stdout becomes "B"'s stdin, whose stdout then becomes "C"'s.
	A | B | C

	# -"- -"- "A"'s -"- -"- "B"'s -"-. This happens while C runs.
	# We wait for C to finish, then start D, and wait for it to finish as well.
	A | B & C; D

	# The five commands launch one at a time.
	E;F;G;H;I
.EE
Once a job ends, it is added to the
.B job table
, which functions like any usual POSIX job table.
.SS Basic syntax - Commands
A command is a sequence of words and redirections. Redirections function similarly to
.I rc
, so
.B check out its man page
for more information regarding that. There are slight differences in how they are handled, though, as to not interfere with new features:
.EX
	ls 2> file      ## The rc way
	ls >(2) file    ## The zrc way

	ls >[2=1] file  ## The rc way
	ls >(2=1) file  ## The zrc way

	ls >[2=] file   ## The rc way
	ls >(2=) file   ## The zrc way

	# This is the same everywhere (spaces matter, though):
	dirname abc/def > output.txt
	cat ~/.zrc | grep 'secret' >> output.txt
	wc < output.txt
.EE
.PP
Both
.I words
and
.I redirections
are separated by whitespace. A word is a sequence of characters that can have substitutions/quoting applied on it. The first word of any command is the
.I command name
, and the rest are arguments to said command.
.PP
The substitutions present in zrc are:
.PP
.B VARIABLE EXPANSION/SUBSTITUTION:
Inside a word, any sequence of characters beginning with a dollar sign and followed by alphanumeric characters, underscores, colons or even other variable substitutions (recursively handled) gets replaced with the value of the variable of the same name. There are some special cases, however:
.EX
	echo $scalar;
	# We have accessed the value of a string variable.

	set var = deref;
	echo $var;
	echo $$var;
	# Simulating dereferencing using recursion.

	echo $arr(key);
	# We have accessed a hashmap's key.

	echo $E:TERMINAL;
	# We have accessed an environment variable.
	# Similar to Tcl's env(TERMINAL)
.EE
Note that in
.I zrc
every array is a so-called "associative array" (hashmap), much like in Tcl. You can also simulate two-dimensional arrays or other data structures using only arrays:
.EX
	set matrix(1,1) = 3
	set matrix(1,2) = 0
	#...
.EE
.I Zrc
also supports special variables:
.B $?
is the return value of the last command, and
.B $!
is the PID of the last command (if it forked off).
.B $argv
is an array that stores all arguments passed to the current function (or to the script, if running in a global scope).
.PP
.B COMMAND OUTPUT SUBSTITUTION:
Any sequence of the type
.B $(...)
treats everything inside braces as a command and returns the standard output it produces. Implicitly, it erases the ending newline character for convenience's sake, but this behavior can be bypassed using quotes. Note that you can nest these:
.EX
	echo $(basename a/b/c/d)
	# Displays 'd'

	echo $(basename $(basename a/b/c))
	# Displays 'c'

	echo "$(basename $(basename a/b/c))"
	# Displays 'c\\n'
.EE
.PP
.B COMMAND RETURN VALUE SUBSTITUTION:
As opposed to traditional shells, Zrc supports 
.B rich return values
, which means that functions and builtins (but not external programs) can return values other than the classic "status numbers" 0-255 (they can be any string). You can access the return value of a command by using square brackets:
.EX
	echo [ls -all]
	echo [$(echo ls) -all]
	echo [[[]]] #echo's 127
	echo $?
.EE
.PP
.B ESCAPE SEQUENCES:
Currently,
.I zrc
supports all C escape sequences, with the exception of \\u... and \\x... If a character is escaped that is not part of an actual escape sequence, the backslash just dissapears.
.PP
.B PARENTHESES:
Use them with 'expr' to avoid clobbering files by confusing operators such as ">" (greater-than) with redirection and to access array indices with spaces. Paren grouping is useful, but it can be escaped if it does not prove to be useful in a situation.
.PP
The quoting rules present in
.I zrc
are simpler than the substitutions: You can group together words Â­using normal quotes anywhere in a script. If you do this, substitutions may occur. Example:
.EX
	# This command has 2 words: "echo" and "a b c"
	return 'a b c'

	# Returns "abcdef"
	return 'a'"b"cd"e"`f`

	# Doesn't evaluate to "[a]"
	return '[a]'
	
	# But this does:
	return '\\[a]'

	# Escaping in a quote:
	return '\\''

	# Newlines:
	return '
	'
.EE
There is also "brace quoting", borrowed from Tcl: Brace quoting ends the current word and begins a new one, containing everything between braces. No substitutions are allowed within braces:
.EX
	# Prints "$(a)", doesn't run the command
	echo {$(a)}

	# Nesting
	echo {{{}}}

	# Newlines in brace quoting:
	echo {{{{{}}}
	}{}{{}}
	}

	# Escaping:
	echo \\{
.EE
Since the language is intentionally kept frugal and clean from a design point of view, there is no concept of "code blocks".
.B Since mostly everything is a string,
you can simulate them using brace quotes that get evaled. This is mostly how all built-ins work in
.IR zrc ...
They are just strings that have yet to be evaled by the interpreter. A creative user can even make his own constructs that look like they're part of the core language interpreter using this elegant approach, with only
.I eval
and the basic builtins available.
.EX
	fn ok {
		eval $argv(1)
		if {$? != 0} {
			set errno = 0
		} else {
			set errno = 1
		}
	}

	ok {
		ls
		asdjasd #error!
	}
	echo $errno
.EE
.PP
.B The expansion construct {*}
splits a word into multiple words, using 
.I zrc's
grammar rules. This can theoretically be used to simulate lists.
.EX
	# 'a''b''c'
	printf '%s%s%s\\n' {*}"'a'  'b' 'c'"
.EE
.PP
Tilde expansion and filename globbing is done on all "barewords" (aka, all words that don't have substitutions/expansions done on them).
.EX
	ls *
	ls ~root
	cat ~/.zrc | wc -nlw

	# Wrong
	ls "*"
.EE
.SS Shell builtin commands
Each command has its own manpage, detailing its use and giving examples.
.I Zrc
builtins can do actions ranging from creating and deleting functions, modifying arrays, forking subshells, making aliases and much more.
.SH OPTIONS
.TP
.BR help
Displays usage info
.TP
.BR version
Displays the interpreter's version
