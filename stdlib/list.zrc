#!/usr/lib/zrc/bin/zrc
# list.zrc
#
# This code is licensed under the BSD license (see LICENSE for details).
# This library adds lists to Zrc.

if {![string cmp $__LIST_ZRC_INCLUDED {}]} {
set __LIST_ZRC_INCLUDED = 1

include cfuncs

##########################################
# Returns a list created from given args #
#                                        #
# @param any                             #
# @return list                           #
##########################################
fn list {
	let {i j len ch res} {
		set res = ""
		for {set i = 1} {$i < $argc} {inc i} {
			set len = [strlen $argv($i)]
			set res = "$res'"
			for {set j = 0} {$j < $len} {inc j} {
				set ch = [strind $argv($i) $j]
				if {![chrcmp $ch '\['] || ![chrcmp $ch '\]']
				||  ![chrcmp $ch '\'']
				||  ![chrcmp $ch '\"']
				||  ![chrcmp $ch '\$']
				||  ![chrcmp $ch '\`']
				||  ![chrcmp $ch '\('] || ![chrcmp $ch '\)']
				||  ![chrcmp $ch '\{'] || ![chrcmp $ch '\}']
				||  ![chrcmp $ch '\\']} {
					set res = "$res\\"
				}
				set res = [strcat $res $ch]
			}
			set res = "$res' "
		}
		return $res
	}
}

###############################
# Finds nth element in a list #
#                             #
# @param 1                    #
# @return string              #
###############################
fn lindex {
	if {$argc != 3} {
		zrcusage <l> <n>
		return {}
	} else {
		let {tmp k res} {
			set k = 0
			foreach tmp {*}$argv(1) {
				if {$k == $argv(2)} {
					set res = [subst $tmp]
					break
				}
				inc k
			}
			return $res
		}
	}
}

#########################
# Finds a list's length #
#                       #
# @param 1              #
# @return int           #
#########################
fn llength {
	if {$argc != 2} {
		zrcusage <l>
		return -1
	} else {
		let {tmp k} {
			set k = 0
			foreach tmp {*}$argv(1) {
				inc k
			}
			return $k
		}
	}
}

##################################
# Remove a list element by index #
#                                #
# @param 2                       #
# @return list                   #
##################################
fn lremove {
	if {$argc != 3} {
		zrcusage <l> <n>
		return {}
	} else {
		let {tmp k cmd} {
			set k = 0
			foreach tmp {*}$argv(1) {
				if {$k != $argv(2)} {
					set cmd = "$cmd $tmp"
				}
				inc k
			}
			return [eval list $cmd]
		}
	}
}

##########################
# Insert at a list index #
#                        #
# @param 3               #
# @return list           #
##########################
fn linsert {
	if {$argc != 4} {
		zrcusage <l> <n> <w>
		return {}
	} else {
		let {tmp k cmd} {
			set k = 0
			foreach tmp {*}$argv(1) {
				if {$k == $argv(2)} {
					set cmd = "$cmd $argv(3)"
				}
				set cmd = "$cmd $tmp"
				inc k
			}
			return [eval list $cmd]
		}
	}
}

####################
# Append to a list #
#                  #
# @param 2         #
# @return list     #
####################
fn lappend {
	if {$argc != 3} {
		zrcusage <l> <w>
		return {}
	} else {
		return [concat $argv(1) [list $argv(2)]]
	}
}

###########################
# Convert arrays to lists #
#                         #
# @param 1                #
# @return list            #
###########################
fn arr2list {
	if {$argc != 2 || ![strcmp $argv(1) 'argv']} {
		zrcusage (not argv)
		return {}
	}
	let {i r} {
		for {set i = 0} {$i < [arr length $argv(1)]} {inc i} {
			set r = [lappend $r [arr index $argv(1) $i]]
		}
		return $r
	}
}

alias argv2list {
	let {i r} {
		for {set i = 0} {$i < $argc} {inc i} {
			set r = [lappend $r $argv($i)]
		}
		return $r
	}
}

}
