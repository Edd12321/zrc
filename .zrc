#!/usr/bin/env zrc
set env('SHELL') = 'zrc'

echo 'Welcome to Zrc!'
echo 'The time is: `{date}'
#echo "Disk usage:";
#df -h;

# Prompt variables
set HOSTNAME = `{hostname}
set USER     = `{whoami}
set RBOLD = `{echo -n "\e\[1;31m"}
set GREEN = `{echo -n "\e\[0;32m"}
set RESET = `{echo -n "\e\[0m"}

#Other vars
set ZRC = /usr/lib/zrc

# Load standard library
eval . $ZRC/stdlib/*
# Path envvars
#set env('PATH') = $ZRC/corebuf/bin:$env('PATH')
set env('MANPATH') = $ZRC/doc:$env('MANPATH')
# Cdpath
eval set env('CDPATH') = $ZRC:~/.dots/work:/$env('CDPATH')
# Refresh internal hash table
rehash ^ &-

fn __git_ps1 {
	git tag > /dev/null ^ &-
	if {$? == 0} {
		echo -n '('
		git branch | grep {^*} | colrm 1 2 | tr -d '\n'
		echo -n ')'
	}
}

fn __status_ps1 {
	if {[string length $status] && [string cmp $status "0"]} {
		echo -n [string cat $RBOLD "($status)" $RESET]
	}
}

fn prompt_cmd {
	set status = $?
	set PWD = `{pwd | sed 's|^$env(HOME)|~|'}
	set PWDSTR = `{dirname $PWD | sed -r {s|/(.)[^/]*|/\1|g}}
	if {![string cmp $PWDSTR '.']} {
		set PWDSTR = '~'
	} else {
		set PWDSTR = $PWDSTR/`{basename $PWD}
	}
	set PWDSTR = `{echo $PWDSTR | tr -s /}
	title "(zrc) $PWDSTR" > /dev/tty
	return {}
}

fn title {
	/bin/echo -ne {\e]0;}
	echo -n $argv(1) \a
}

set PS1 = {[string cat [prompt_cmd]$GREEN $USER $RESET\@$HOSTNAME]\
           [string cat $GREEN $PWDSTR]\
           [string cat \
		$RESET \
		`{__git_ps1} \
		`{__status_ps1}% '\ '];return $status}

# Key bindings
bindkey -c "\cl" { 
	eval {
		clear
		eval echo -n $PS1
	} 1> &2
}
bindkey -c "\e?"  {
	eval {
		echo && l
		eval echo -n $PS1
	} 1> &2
}
bindkey -c "\en"  {
	eval {
		archey3
		eval echo -n $PS1
	} 1> &2
}
bindkey -c "\cb"  {firefox &}
bindkey -c "\ct"  {$env(TERMINAL) &}
bindkey -c "\cf"  {doublecmd &}
bindkey -c "\cft" {thunar &}

# Show ls icons because I'm lazy
fn enable_lsd {
	if {!($__use_lsd) && ![which lsd ^ &- > &-]} {
		alias l "lsd -hF"
		alias lt "lsd -altrhF"
		alias la "lsd -all"
		set __use_lsd = 1
	} else {
		alias l "ls -hF --color"
		alias lt "ls -altrhF --color"
		alias la "ls -all"
		set __use_lsd = 0
	}
}

fn soundchk {
	timeout 0.15 aplay /dev/random
}

# Aliases
enable_lsd
alias c       "clear"
alias mkd     "mkdir -pv"
alias rmd     "rmdir -pv"
alias j       "jobs"
alias p       "ps -l"
alias du      "du -k"
alias ..      "cd .."
alias ...     "cd ../.."
alias ....    "cd ../../.."
alias .....   "cd ../../../.."
alias ......  "cd ../../../../.."
alias sha1    "openssl sha1"
alias ports   "netstat -tulanp"
alias net     "\$env(AUTH) systemctl restart NetworkManager"
alias mkdir   "mkdir -pv"
alias pacman  "\$env(AUTH) pacman"
alias calc    "bc -ql"
alias emacs   "emacs -nw"
alias history "eval \$env(PAGER) ~/.zrc_history"
alias da      "date '+%Y-%m-%d %A %T %Z'"

# Modify original cmds
alias cp      "cp -i"
alias mv      "mv -i"
alias rm      "rm -iv"
alias mkdir   "mkdir -pv"
alias rmdir   "rmdir -pv"
alias ps      "ps auxf"
alias ping    "ping -c 5"

# Chmod alias
alias mx      "chmod a+x"
alias 000     "chmod 000"
alias 644     "chmod 644"
alias 666     "chmod 666"
alias 755     "chmod 755"
alias 777     "chmod 777"

# Ctrl flow
alias forever "while 1"

fn mkcd { mkdir $argv(1) && cd $argv(1); }
fn lcd  { cd $argv(1) && l }

# Rot13 is a very common cipher for some reason
fn rot13 {
	if {$argc == 1} {
		tr '\[a-m]\[n-z]\[A-M]\[N-Z]' '\[n-z]\[a-m]\[N-Z]\[A-M]'
	} else {
		for {set i = 1} {$i < $argc} {inc i} {
			echo $argv($i)
		} | rot13
	}
}

# Go up N Times
fn up { 
	for {set i = 0} {$i < $argv(1)} {inc i} ..
}

# Extract an archive
# (because it's hard to memorize tar commands)
fn extract {
	if [test -f $argv(1)] {
		echo '$argv(1): file not found!' 1> &2
		return 1
	} else {
		let s {
			set s = $argv(1)
			switch $s {
				reg {.*\.tar.bz2$} { tar xjf    $s }
				reg {.*\.tar.gz$}  { tar xzf    $s }
				reg {.*\.bz2$}     { bunzip2    $s }
				reg {.*\.rar$}     { unrar e    $s }
				reg {.*\.gz$}      { gunzip     $s }
				reg {.*\.tar$}     { tar xf     $s }
				reg {.*\.tbz2$}    { tar xjf    $s }
				reg {.*\.tgz$}     { tar xzf    $s }
				reg {.*\.zip$}     { unzip      $s }
				reg {.*\.Z$}       { uncompress $s }
				reg {.*\.7z$}      { 7z x       $s }
				default {
					echo '$s could not be extracted!' 1> &2
					return 1
				}
			}
		}
	}
}

# Function from Xmodulo
fn kernelgraph {
	lsmod | perl -e {
		print "digraph \"lsmod\" {";
		<>;
		while(<>){
			@_=split/\s+/;
			print "\"$_[0]\" -> \"$_\"\n" for split/,/,$_[3]
		}
		print "}"
	} | dot -Tpng | display -;
}

# Custom tools
# https://github.com/Edd12321/{cstop,evct,zrc}
alias top+ 'cstop;reset'
alias vi+  'evct'

# Default programs
set env('AUTH')     = "doas"
set env('EDITOR')   = "emacs"
set env('VISUAL')   = "emacs"
set env('TERMINAL') = "xfce4-terminal"
set env('MANPAGER') = "most"
set env('PAGER')    = "most"
set env('AS')       = "fasm"
set env('CXX')      = "g++"
set env('CC')       = "gcc"
set env('BROWSER')  = "firefox"
if {[string cmp $env('TERM') "linux"]} {
	set env('TERM') = "xterm-256color"
}
